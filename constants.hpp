#pragma once

#include <string>

#include <boost/filesystem.hpp>


#define EXIT_SUCCESS 0
#define EXIT_FAILURE_PARAM 1
#define EXIT_FAILURE_NONEXISTENT_FOLDER 2
#define EXIT_FAILURE_NONEXISTENT_FILE 3


namespace maplereverence {
    const std::string listWZName("List.wz");
    const std::string wzIdentifier("PKG1");
    const std::string wzExtension(".wz");
    const std::string imgExtension(".img");
    const std::string wzExtractPath("wzextracted");
    const std::string imgExtractPath("imgextracted");
    const char imgEntryStringByte = 0x73;
    const char imgEntryLinkByte = 0x1B;

    // unicode is 2 bytes of ascii joined together
    const int16_t encryptionKeyUnicodeLength = 84;
    const int16_t encryptionKeyAsciiLength = 168;

    /*
    const uint16_t encryptionKeyUnicode[] = {
        26027,  1353, 52583,  2647, 31640,  2695, 26092,
        35591, 29845, 27702, 22963, 24105, 22946, 32259,
        32191, 29899, 21392, 37926, 28440, 34657, 54992,
         7801, 21164, 21225, 31362, 59422};
         */
    // v55 encryption key
    /*
    const uint8_t encryptionKeyAscii[] = {
        101, 171,   5,  73, 205, 103,  10,  87, 123,
        152,  10, 135, 101, 236, 139,   7, 116, 149,
        108,  54,  89, 179,  94,  41,  89, 162, 126,
          3, 125, 191, 116, 203,  83, 144, 148,  38,
        111,  24, 135,  97, 214, 208,  30, 121,  82,
        172,  82, 233, 122, 130, 232,  30};
    */
    // v62 encryption key --> not oding it right
    const uint8_t encryptionKeyAscii[] = {
        0x96, 0xAE, 0x3F, 0xA4, 0x48, 0xFA, 0xDD, 0x90,
        0x46, 0x76, 0x05, 0x61, 0x97, 0xCE, 0x78, 0x68,
        0x2B, 0xA0, 0x44, 0x8F, 0xC1, 0x56, 0x7E, 0x32,
        0xFC, 0xE1, 0xF5, 0xB3, 0x14, 0x14, 0xC5, 0x22, // 32 byte

        0xF5, 0xC3, 0x68, 0x2E, 0x9D, 0xC3, 0x4A, 0x0B,
        0xFA, 0xFE, 0x68, 0x45, 0x53, 0x8A, 0xFB, 0x5D,
        0x09, 0x4F, 0x59, 0xFC, 0xE9, 0x11, 0x12, 0x9B,
        0xD9, 0x0F, 0xF2, 0xE8, 0x62, 0x69, 0x3B, 0x76, // 64 byte

        0x47, 0x88, 0x10, 0x75, 0xAC, 0xE3, 0x96, 0xD7,
        0xDB, 0x12, 0x79, 0xCD, 0x59, 0xE4, 0xE0, 0x0C,
        0xEC, 0xA1, 0xFC, 0xD2, 0xB2, 0x3C, 0xBC, 0x4A,
        0x5B, 0x9D, 0x6B, 0xA9, 0x86, 0x29, 0x28, 0x82, // 96 byte

        0x0B, 0x43, 0x59, 0x40, 0xDA, 0xE7, 0xE5, 0x93,
        0x95, 0xDF, 0x00, 0x02, 0xEB, 0x8A, 0xBE, 0x0C,
        0xF1, 0x10, 0xAA, 0x5B, 0x67, 0x94, 0x90, 0xF4,
        0xF5, 0xCE, 0xE8, 0xE1, 0x61, 0x09, 0x11, 0x09, // 128 byte

        0x50, 0xE2, 0x54, 0x4C, 0x05, 0x49, 0x97, 0x88,
        0xF8, 0xF0, 0xAF, 0x15, 0x4A, 0x6C, 0xE0, 0x0E,
        0x5E, 0xC0, 0xCD, 0xAB, 0x52, 0x20, 0xA8, 0x2E,
        0x50, 0x64, 0x0A, 0x1A, 0x00, 0x3E, 0x9E, 0xE9, // 160 byte

        0x6A, 0xD0, 0x19, 0xB5, 0x00, 0x00, 0x00, 0x00};

    const std::string aesIV = "4D23C72B";
    const std::string aesKey = "13522A5B080210600602430FB44B35051B0A5F090F500C1B3355010952DEC71E";
    const std::string useful = "aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f";

    const uint8_t doubleDecryptList[] = { 
        0x3C, 0x05, 0x93, 0x09, 0xE6, 0x55, 0x6D, 0x21, 0xF4,
        0xC5, 0xB1, 0xD4, 0x21, 0x79, 0xC0, 0xD1, 0x91, 0x1B,
        0xF8, 0x32, 0x7F, 0xE9, 0xBE, 0xF3, 0x3E, 0x22, 0x31,

        0xC6, 0xBB, 0x78, 0xBC, 0x02, 0x99, 0x5B, 0x58, 0xEB, // unknown at here
        0xA1, 0xD7, 0x57, 0xB0, 0x04, 0x03, 0xCA, 0xAC, 0x84,
        0x7B, 0x8A, 0x30, 0xA0, 0x59, 0x34, 0xC3};
}

